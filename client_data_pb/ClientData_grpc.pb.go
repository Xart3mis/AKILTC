// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: ClientData.proto

package client_data_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConsumerClient is the client API for Consumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerClient interface {
	SubscribeOnScreenText(ctx context.Context, in *ClientDataRequest, opts ...grpc.CallOption) (Consumer_SubscribeOnScreenTextClient, error)
	UnsubscribeOnScreenText(ctx context.Context, in *ClientDataRequest, opts ...grpc.CallOption) (*Void, error)
	GetExecCommand(ctx context.Context, in *ClientDataRequest, opts ...grpc.CallOption) (*ClientExecData, error)
	SetExecOutput(ctx context.Context, in *ClientExecOutput, opts ...grpc.CallOption) (*Void, error)
}

type consumerClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerClient(cc grpc.ClientConnInterface) ConsumerClient {
	return &consumerClient{cc}
}

func (c *consumerClient) SubscribeOnScreenText(ctx context.Context, in *ClientDataRequest, opts ...grpc.CallOption) (Consumer_SubscribeOnScreenTextClient, error) {
	stream, err := c.cc.NewStream(ctx, &Consumer_ServiceDesc.Streams[0], "/client_data_pb.Consumer/SubscribeOnScreenText", opts...)
	if err != nil {
		return nil, err
	}
	x := &consumerSubscribeOnScreenTextClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Consumer_SubscribeOnScreenTextClient interface {
	Recv() (*ClientDataOnScreenTextResponse, error)
	grpc.ClientStream
}

type consumerSubscribeOnScreenTextClient struct {
	grpc.ClientStream
}

func (x *consumerSubscribeOnScreenTextClient) Recv() (*ClientDataOnScreenTextResponse, error) {
	m := new(ClientDataOnScreenTextResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *consumerClient) UnsubscribeOnScreenText(ctx context.Context, in *ClientDataRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/client_data_pb.Consumer/UnsubscribeOnScreenText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) GetExecCommand(ctx context.Context, in *ClientDataRequest, opts ...grpc.CallOption) (*ClientExecData, error) {
	out := new(ClientExecData)
	err := c.cc.Invoke(ctx, "/client_data_pb.Consumer/GetExecCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerClient) SetExecOutput(ctx context.Context, in *ClientExecOutput, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/client_data_pb.Consumer/SetExecOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerServer is the server API for Consumer service.
// All implementations must embed UnimplementedConsumerServer
// for forward compatibility
type ConsumerServer interface {
	SubscribeOnScreenText(*ClientDataRequest, Consumer_SubscribeOnScreenTextServer) error
	UnsubscribeOnScreenText(context.Context, *ClientDataRequest) (*Void, error)
	GetExecCommand(context.Context, *ClientDataRequest) (*ClientExecData, error)
	SetExecOutput(context.Context, *ClientExecOutput) (*Void, error)
	mustEmbedUnimplementedConsumerServer()
}

// UnimplementedConsumerServer must be embedded to have forward compatible implementations.
type UnimplementedConsumerServer struct {
}

func (UnimplementedConsumerServer) SubscribeOnScreenText(*ClientDataRequest, Consumer_SubscribeOnScreenTextServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOnScreenText not implemented")
}
func (UnimplementedConsumerServer) UnsubscribeOnScreenText(context.Context, *ClientDataRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeOnScreenText not implemented")
}
func (UnimplementedConsumerServer) GetExecCommand(context.Context, *ClientDataRequest) (*ClientExecData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecCommand not implemented")
}
func (UnimplementedConsumerServer) SetExecOutput(context.Context, *ClientExecOutput) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetExecOutput not implemented")
}
func (UnimplementedConsumerServer) mustEmbedUnimplementedConsumerServer() {}

// UnsafeConsumerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerServer will
// result in compilation errors.
type UnsafeConsumerServer interface {
	mustEmbedUnimplementedConsumerServer()
}

func RegisterConsumerServer(s grpc.ServiceRegistrar, srv ConsumerServer) {
	s.RegisterService(&Consumer_ServiceDesc, srv)
}

func _Consumer_SubscribeOnScreenText_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsumerServer).SubscribeOnScreenText(m, &consumerSubscribeOnScreenTextServer{stream})
}

type Consumer_SubscribeOnScreenTextServer interface {
	Send(*ClientDataOnScreenTextResponse) error
	grpc.ServerStream
}

type consumerSubscribeOnScreenTextServer struct {
	grpc.ServerStream
}

func (x *consumerSubscribeOnScreenTextServer) Send(m *ClientDataOnScreenTextResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Consumer_UnsubscribeOnScreenText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).UnsubscribeOnScreenText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client_data_pb.Consumer/UnsubscribeOnScreenText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).UnsubscribeOnScreenText(ctx, req.(*ClientDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_GetExecCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).GetExecCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client_data_pb.Consumer/GetExecCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).GetExecCommand(ctx, req.(*ClientDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Consumer_SetExecOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientExecOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).SetExecOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client_data_pb.Consumer/SetExecOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).SetExecOutput(ctx, req.(*ClientExecOutput))
	}
	return interceptor(ctx, in, info, handler)
}

// Consumer_ServiceDesc is the grpc.ServiceDesc for Consumer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Consumer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client_data_pb.Consumer",
	HandlerType: (*ConsumerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnsubscribeOnScreenText",
			Handler:    _Consumer_UnsubscribeOnScreenText_Handler,
		},
		{
			MethodName: "GetExecCommand",
			Handler:    _Consumer_GetExecCommand_Handler,
		},
		{
			MethodName: "SetExecOutput",
			Handler:    _Consumer_SetExecOutput_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOnScreenText",
			Handler:       _Consumer_SubscribeOnScreenText_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ClientData.proto",
}
